/***************************************************************************
//
// LINE.CPP
//
// TAPI Service provider for TSP++ version 3.0
// Line management functions
//
// Copyright (C) 2009 Junction Networks
// All rights reserved
//
// Generated by the TSPWizard © 2009 JulMar Technology, Inc.
// 
/***************************************************************************/

/*-------------------------------------------------------------------------------*/
// INCLUDE FILES
/*-------------------------------------------------------------------------------*/
#include "stdafx.h"
#include "OnSip.h"
#include <spbstrm.h>

/*----------------------------------------------------------------------------
	GLOBALS AND CONSTANTS
-----------------------------------------------------------------------------*/
const UINT MAXCALLDATA_SIZE = 4096;

/*-------------------------------------------------------------------------------*/
// TSPI Request map
/*-------------------------------------------------------------------------------*/
BEGIN_TSPI_REQUEST(COnSipLine)
	ON_AUTO_TSPI_REQUEST(REQUEST_SETCALLDATA)
	ON_TSPI_REQUEST_MAKECALL(OnMakeCall)
	ON_TSPI_REQUEST_DIAL(OnDial)
	ON_TSPI_REQUEST_DROPCALL(OnDropCall)
END_TSPI_REQUEST()

/*****************************************************************************
** Procedure:  COnSipLine::COnSipLine
**
** Arguments: void
**
** Returns:    void
**
** Description:  Constructor for the line object
**
*****************************************************************************/
COnSipLine::COnSipLine()
{
}// COnSipLine::COnSipLine

/*****************************************************************************
** Procedure:  COnSipLine::~COnSipLine
**
** Arguments: void
**
** Returns:    void
**
** Description:  Destructor for the line object
**
*****************************************************************************/
COnSipLine::~COnSipLine()
{
}// COnSipLine::~COnSipLine


// Reads the phoneNumber from the registry config, and line name 
void COnSipLine::_getConfigInfo(tstring* phoneNumber,tstring* lineName)
{
	// Get the phone number
	COnSipDevice* pDevice = GetDeviceInfo();
	if ( pDevice != NULL )
	{
		DWORD dwProviderID = pDevice->GetProviderID();
		*phoneNumber = GetSP()->ReadProfileString(dwProviderID, REG_PHONENUMBER, _T("") );
		Logger::log_debug( _T("COnSipLine::_getConfigInfo dwProvID=%ld phoneNumber=%s"), dwProviderID, phoneNumber->c_str() );
	}
	else
	{
		Logger::log_error( _T("COnSipLine::_getConfigInfo no ProviderID") );
	}
	// Default line name to switch name if no phone number is specified
	*lineName = SWITCH_NAME;

	// Set the name associated with this line.  This is optional, it gives
	// the user a displayable name which is associated with the line.  Most
	// applications use this name in their UI.
	if ( !phoneNumber->empty() )
		*lineName = Strings::stringFormat( LINE_NAME, phoneNumber->c_str() );
}

/*****************************************************************************
** Procedure:  COnSipLine::read
**
** Arguments:  'istm' - Input stream
**
** Returns:    pointer to istm
**
** Description:  This function is called to serialize data in from the
**               registry.  The line object has already been completely
**               initialized by the TSP++ library
**
*****************************************************************************/
TStream& COnSipLine::read(TStream& istm)
{
	// Always call the base class to read in default line information
	CTSPILineConnection::read(istm);

	LPLINEDEVCAPS lpLineCaps = GetLineDevCaps();
	lpLineCaps->dwDevCapFlags = 0 ;
	lpLineCaps->dwLineStates = LINEDEVSTATE_CONNECTED | 
			LINEDEVSTATE_DISCONNECTED | 
			LINEDEVSTATE_INSERVICE | 
			LINEDEVSTATE_OUTOFSERVICE | 
			LINEDEVSTATE_NUMCALLS  |
			LINEDEVSTATE_OTHER;

	// Specify that we want all calls closed on exit of the driver.
	// This does not drop the calls, just IDLEs them.
	DeleteCallsOnClose();

	// Get the phoneNumber and line name to use (from config)
	tstring phoneNumber;
	tstring lineName;
	_getConfigInfo(&phoneNumber,&lineName);

	// Set TAPI Line Name
	SetName (lineName.c_str());

	// Configure the line based on the type
	switch (GetLineType())
	{
		case Station:			InitializeStation(); break;
		default:				break;
	}

	return istm;

}// COnSipLine::read

/*****************************************************************************
** Procedure:  COnSipLine::InitializeStation
**
** Arguments:  void
**
** Returns:    void
**
** Description:  This function is called to initialize a station line object.
**
*****************************************************************************/
void COnSipLine::InitializeStation()
{
//	LPLINEDEVCAPS lpCaps = GetLineDevCaps();

	// TODO: Adjust the ADDRESSCAPS based on this being a station
	for (int iAddress = 0; iAddress < GetAddressCount(); iAddress++)
	{
		CTSPIAddressInfo* pAddress = GetAddress(iAddress);
		_TSP_ASSERTE (pAddress != NULL);

		// Initialize the address information to be the basic set of information
		InitAddress(pAddress);
	}

}// COnSipLine::InitializeStation

/*****************************************************************************
** Procedure:  COnSipLine::InitAddress
**
** Arguments:  'pAddr' - Address object to initialize
**
** Returns:    void
**
** Description:  This function is called to initialize a single address
**
*****************************************************************************/
void COnSipLine::InitAddress(CTSPIAddressInfo* pAddress)
{
	Logger::log_debug( _T("COnSipLine::InitAddress pAddr=%p"), pAddress );
	_TSP_ASSERTE (pAddress != NULL);

	LPLINEADDRESSCAPS lpAddrCaps = pAddress->GetAddressCaps();
	lpAddrCaps->dwAddrCapFlags = LINEADDRCAPFLAGS_DIALED;
	lpAddrCaps->dwMaxCallDataSize = 0;
	lpAddrCaps->dwCallInfoStates= 0;

	lpAddrCaps->dwCallerIDFlags = 
		lpAddrCaps->dwConnectedIDFlags = 
		lpAddrCaps->dwRedirectionIDFlags =
		lpAddrCaps->dwRedirectingIDFlags =
		lpAddrCaps->dwCalledIDFlags =
		lpAddrCaps->dwCalledIDFlags = LINECALLPARTYID_UNAVAIL;
	lpAddrCaps->dwCallStates &= ~(LINECALLSTATE_SPECIALINFO | LINECALLSTATE_RINGBACK | LINECALLSTATE_BUSY );
	lpAddrCaps->dwDialToneModes = LINEDIALTONEMODE_NORMAL;
	lpAddrCaps->dwBusyModes = LINEBUSYMODE_UNAVAIL;
	lpAddrCaps->dwSpecialInfo = LINESPECIALINFO_UNAVAIL;
	lpAddrCaps->dwDisconnectModes &= ~LINEDISCONNECTMODE_REJECT;
	lpAddrCaps->dwCallFeatures &= ~(LINECALLFEATURE_MONITORMEDIA | LINECALLFEATURE_SETCALLPARAMS | LINECALLFEATURE_SETCALLDATA );

	// Get the phoneNumber and line name to use (from config)
	tstring phoneNumber;
	tstring lineName;
	_getConfigInfo(&phoneNumber,&lineName);

	// Set the address name
	if ( !phoneNumber.empty() )
	{
		pAddress->SetDialableAddress( phoneNumber.c_str() );
		pAddress->SetName( phoneNumber.c_str() );
	}

}// COnSipLine::InitAddress

// Overrides CTSPILineConnection::CompleteRequest just for logging purposes 
void COnSipLine::CompleteRequest(CTSPIRequest* pReq, LONG lResult, bool fTellTapi, bool fRemoveRequest)
{
	Logger::log_debug( _T("COnSipLine::CompleteRequest pReq=%p lResult=%ld fTellTapi=%d fRemoveReq=%d"), pReq, lResult, fTellTapi, fRemoveRequest );
	CTSPILineConnection::CompleteRequest( pReq, lResult, fTellTapi, fRemoveRequest );
}
		
/*****************************************************************************
** Procedure:  COnSipLine::OnAddressFeaturesChanged
**
** Arguments:  'pAddr' - Address features are changing on
**             'dwFeatures' - New features for address
**
** Returns:    New features for address
**
** Description: This method is called when the features of the address change
**              It gives the derived code an opportunity to adjust the reflected
**              features before TAPI is notified.
**
*****************************************************************************/
DWORD COnSipLine::OnAddressFeaturesChanged (CTSPIAddressInfo* pAddr, DWORD dwFeatures)
{
	Logger::log_debug( _T("COnSipLine::OnAddressFeaturesChanged dwFeatures=%lx"), dwFeatures );

	// TODO: Adjust any features for the address based on the current state of the
	// hardware. This is where you can restrict the features shown in the provider for
	// special cases.
	return CTSPILineConnection::OnAddressFeaturesChanged(pAddr, dwFeatures);

}// COnSipLine::OnAddressFeaturesChanged

/*****************************************************************************
** Procedure:  COnSipLine::OnLineFeaturesChanged
**
** Arguments:  'dwFeatures' - New features for line
**
** Returns:    New features for address
**
** Description: This method is called when the features of the line change.
**              It gives the derived code an opportunity to adjust the reflected
**              features before TAPI is notified.
**
*****************************************************************************/
DWORD COnSipLine::OnLineFeaturesChanged (DWORD dwFeatures)
{
	Logger::log_debug( _T("COnSipLine::OnLineFeaturesChanged dwFeatures=%lx"), dwFeatures );

	// TODO: Adjust any features for the line based on the current state of the
	// hardware. This is where you can restrict the features shown in the provider for
	// special cases.
	return CTSPILineConnection::OnLineFeaturesChanged(dwFeatures);

}// COnSipLine::OnLineFeaturesChanged

/*****************************************************************************
** Procedure:  COnSipLine::OnCallFeaturesChanged
**
** Arguments:  'pCall' - Call that changed
**             'dwCallFeatures' - new feature list
**
** Returns:    true/false success indicator
**
** Description: This method is called whenever the call features have changed due to
**              state changes.  The address/line have also been adjusted by the time
**              this function is called.
**
*****************************************************************************/
DWORD COnSipLine::OnCallFeaturesChanged(CTSPICallAppearance* pCall, DWORD dwCallFeatures)
{      
	Logger::log_debug( _T("COnSipLine::OnCallFeaturesChanged dwCallFeatures=%lx"), dwCallFeatures );

	// TODO: Adjust the call features for the given call based on information
	// associated with the call and hardware capabilities.
	return CTSPILineConnection::OnCallFeaturesChanged(pCall, dwCallFeatures);

}// COnSipLine::OnCallFeaturesChanged

/*****************************************************************************
** Procedure:  COnSipLine::OpenDevice
**
** Arguments:  void
**
** Returns:    void
**
** Description: This method is called when the phone is opened by TAPI.
**              It may be used to check the link to the switch and fail the
**              lineOpen() call to TAPI so that no line operations can
**              occur.
**
*****************************************************************************/
bool COnSipLine::OpenDevice()
{
	Logger::log_debug( _T("COnSipLine::OpenDevice"));

	// is not connected or pass through to the default implementation if it is.
	return CTSPILineConnection::OpenDevice();

}// COnSipLine::OpenDevice

/*****************************************************************************
** Procedure:  COnSipLine::OnTimer
**
** Arguments:  void
**
** Returns:    void
**
** Description: This method is called periodically by the interval timer
**
*****************************************************************************/
void COnSipLine::OnTimer()
{
	// Poll the active request for timeout. This is not necessary if you
	// do not implement time-out conditions for the switch. Note that the
	// interval is controlled by the "SetIntervalTimer" in device.cpp (Init)
	ReceiveData();

}// COnSipLine::OnTimer

CTSPICallAppearance* COnSipLine::OnNewCallDetected(bool fPlaced,
							CTSPICallAppearance* pCall,
							const COnSip_CallEvent* callEvent)
{
	Logger::log_debug( _T("COnSipLine::OnNewCallDetected %s"), callEvent->ToString().c_str() );

	// If we have not yet created a call then do so. We may already have a call
	// object created if we are placing the call from the TSP.
	if (pCall == NULL)
	{
		// Create the call appearance and set the call-id in case a subsequent request
		// on another line is searching for this call.
		pCall = GetAddress(0)->CreateCallAppearance();
		pCall->SetCallID( callEvent->CallId() );

		// Set the callstate to offering or dialing for this new call.
		if (fPlaced)
			pCall->SetCallState(LINECALLSTATE_DIALING, 0, LINEMEDIAMODE_INTERACTIVEVOICE);
		else
			pCall->SetCallState(LINECALLSTATE_OFFERING, LINEOFFERINGMODE_INACTIVE, LINEMEDIAMODE_INTERACTIVEVOICE);
	}				

	// Set Caller-Id and Called-Id
	// TODO??  Is Caller-ID and Called-ID different depending on call direction????
	DWORD dwFlags = LINECALLPARTYID_ADDRESS;
	tstring remoteId = callEvent->RemoteID();
	if ( !remoteId.empty() )
		pCall->SetCallerIDInformation(dwFlags, remoteId.c_str(), NULL );
	tstring calledId = callEvent->CalledID();
	if ( !calledId.empty() )
		pCall->SetCalledIDInformation(dwFlags, calledId .c_str(), NULL );

	// If we have no reason code for this call then assign it now.
	LPLINECALLINFO lpci = pCall->GetCallInfo();
	if (lpci->dwReason == LINECALLREASON_UNKNOWN)
	{
		pCall->SetCallReason(LINECALLREASON_DIRECT);
	}

	// Set the call origin for this call.
	// If this line is the originator of the call then mark as an outbound call.
	if (fPlaced)
	{
		pCall->SetCallOrigin(LINECALLORIGIN_OUTBOUND);
	}
	// Otherwise mark as an incoming call.
	else 
	{
//		pCall->SetCallOrigin(LINECALLORIGIN_EXTERNAL | LINECALLORIGIN_INBOUND);
		pCall->SetCallOrigin(LINECALLORIGIN_INBOUND);
	}
	return pCall;

}// CJTLine::OnNewCallDetected
